// <auto-generated />
using System;
using CarShop.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarShop.Core.Migrations
{
    [DbContext(typeof(CarShopDbContext))]
    [Migration("20210813162207_initial4")]
    partial class initial4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.6.21352.1")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Audit.OperationAuditHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServiceHistoryID")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ServiceHistoryID");

                    b.ToTable("OperationAuditHistory");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Audit.ServiceAuditHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.HasIndex("ChangedByID");

                    b.ToTable("ServiceAuditHistory");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.Menus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Icon")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Label")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentMenuID")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ParentMenuID");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Icon = "th-large",
                            IsDeleted = false,
                            Label = "Menu-Dashboards",
                            Url = "home"
                        },
                        new
                        {
                            ID = 2,
                            Icon = "shield-alt",
                            IsDeleted = false,
                            Label = "Menu-Security"
                        },
                        new
                        {
                            ID = 5,
                            Icon = "bars",
                            IsDeleted = false,
                            Label = "Menu-Menus",
                            ParentMenuID = 2,
                            Url = "menus"
                        },
                        new
                        {
                            ID = 4,
                            Icon = "tags",
                            IsDeleted = false,
                            Label = "Menu-Roles",
                            ParentMenuID = 2,
                            Url = "roles"
                        },
                        new
                        {
                            ID = 3,
                            Icon = "users",
                            IsDeleted = false,
                            Label = "Menu-Users",
                            ParentMenuID = 2,
                            Url = "users"
                        });
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.Roles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UsersID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.RolesAudit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("OperationHistoryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EntityId");

                    b.HasIndex("OperationHistoryID");

                    b.ToTable("RolesAudit");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.UserRefreshTokens", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IsDeleted = false,
                            Name = "Test",
                            PasswordHash = "D7CJC09fSWEK6SKDHpUxFWlOlGnSpSW46gbJzLQbaNb2ymi9CnewIM1QtoBg31Ad",
                            Username = "Test"
                        });
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Audit.OperationAuditHistory", b =>
                {
                    b.HasOne("CarShop.Core.BusinessEntities.Audit.ServiceAuditHistory", "ServiceHistory")
                        .WithMany("Operations")
                        .HasForeignKey("ServiceHistoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceHistory");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Audit.ServiceAuditHistory", b =>
                {
                    b.HasOne("CarShop.Core.BusinessEntities.Security.Users", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChangedBy");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.Menus", b =>
                {
                    b.HasOne("CarShop.Core.BusinessEntities.Security.Menus", "ParentMenu")
                        .WithMany("ChildMenus")
                        .HasForeignKey("ParentMenuID");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.Roles", b =>
                {
                    b.HasOne("CarShop.Core.BusinessEntities.Security.Users", null)
                        .WithMany("Roles")
                        .HasForeignKey("UsersID");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.RolesAudit", b =>
                {
                    b.HasOne("CarShop.Core.BusinessEntities.Security.Roles", "Entity")
                        .WithMany("History")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarShop.Core.BusinessEntities.Audit.OperationAuditHistory", "OperationHistory")
                        .WithMany()
                        .HasForeignKey("OperationHistoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("OperationHistory");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.UserRefreshTokens", b =>
                {
                    b.HasOne("CarShop.Core.BusinessEntities.Security.Users", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Audit.ServiceAuditHistory", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.Menus", b =>
                {
                    b.Navigation("ChildMenus");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.Roles", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("CarShop.Core.BusinessEntities.Security.Users", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
